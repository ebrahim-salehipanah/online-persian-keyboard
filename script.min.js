const keyboard = document.getElementById("keyboard"); const output = document.getElementById("output"); const copyBtn = document.getElementById("copyBtn"); const themeToggle = document.getElementById("themeToggle"); let isShift = !1; let isCapsLock = !1; const rows = [[{ normal: "‚Äå~", shift: "¬±" }, { normal: "€±", shift: "!" }, { normal: "€≤", shift: "@" }, { normal: "€≥", shift: "#" }, { normal: "€¥", shift: "$" }, { normal: "€µ", shift: "%" }, { normal: "€∂", shift: "^" }, { normal: "€∑", shift: "&" }, { normal: "€∏", shift: "*" }, { normal: "€π", shift: "(" }, { normal: "€∞", shift: ")" }, { normal: "-", shift: "_" }, { normal: "=", shift: "+" }, { normal: "Backspace", type: "backspace", wide: !0 },], [{ normal: "Tab", type: "tab", wide: !0 }, { normal: "ÿ∂", shift: "Ÿé" }, { normal: "ÿµ", shift: "Ÿã" }, { normal: "ÿ´", shift: "Ÿè" }, { normal: "ŸÇ", shift: "Ÿå" }, { normal: "ŸÅ", shift: "Ÿê" }, { normal: "ÿ∫", shift: "Ÿç" }, { normal: "ÿπ", shift: "Ÿë" }, { normal: "Ÿá", shift: "Ÿí" }, { normal: "ÿÆ", shift: "ŸÄ" }, { normal: "ÿ≠", shift: "√∑" }, { normal: "ÿ¨", shift: "√ó" }, { normal: "⁄Ü", shift: "ÿõ" }, { normal: "\\", shift: "|" },], [{ normal: "Caps Lock", type: "capslock", wide: !0 }, { normal: "ÿ¥", shift: "!" }, { normal: "ÿ≥", shift: "@" }, { normal: "€å", shift: "#" }, { normal: "ÿ®", shift: "$" }, { normal: "ŸÑ", shift: "%" }, { normal: "ÿß", shift: "ÿ¢" }, { normal: "ÿ™", shift: "&" }, { normal: "ŸÜ", shift: "*" }, { normal: "ŸÖ", shift: "(" }, { normal: "⁄©", shift: ")" }, { normal: "⁄Ø", shift: "_" }, { normal: "Enter", type: "enter", wide: !0 },], [{ normal: "Shift", type: "shift", wide: !0 }, { normal: "ÿ∏", shift: "{" }, { normal: "ÿ∑", shift: "}" }, { normal: "ÿ≤", shift: "[" }, { normal: "ÿ±", shift: "]" }, { normal: "ÿ∞", shift: ":" }, { normal: "ÿØ", shift: "\"" }, { normal: "Ÿæ", shift: "'" }, { normal: "Ÿà", shift: "<" }, { normal: ".", shift: ">" }, { normal: "ÿü", shift: "ÿü" }, { normal: "Shift", type: "shift", wide: !0 },], [{ normal: "Ctrl", type: "ctrl" }, { normal: "Alt", type: "alt" }, { normal: "Space", type: "space", wide: !0 }, { normal: "‚Üê", type: "arrow" }, { normal: "‚Üì", type: "arrow" }, { normal: "‚Üë", type: "arrow" }, { normal: "‚Üí", type: "arrow" },],]; const physicalKeyMap = { "`": "‚Äå", "1": "€±", "2": "€≤", "3": "€≥", "4": "€¥", "5": "€µ", "6": "€∂", "7": "€∑", "8": "€∏", "9": "€π", "0": "€∞", "-": "-", "=": "=", q: "ÿ∂", w: "ÿµ", e: "ÿ´", r: "ŸÇ", t: "ŸÅ", y: "ÿ∫", u: "ÿπ", i: "Ÿá", o: "ÿÆ", p: "ÿ≠", "[": "ÿ¨", "]": "⁄Ü", "\\": "\\", a: "ÿ¥", s: "ÿ≥", d: "€å", f: "ÿ®", g: "ŸÑ", h: "ÿß", j: "ÿ™", k: "ŸÜ", l: "ŸÖ", ";": "⁄©", "'": "⁄Ø", z: "ÿ∏", x: "ÿ∑", c: "ÿ≤", v: "ÿ±", b: "ÿ∞", n: "ÿØ", m: "Ÿæ", ",": "Ÿà", ".": ".", "/": "ÿü", " ": " ", }; const physicalKeyShiftMap = { "`": "¬±", "1": "!", "2": "@", "3": "#", "4": "$", "5": "%", "6": "^", "7": "&", "8": "*", "9": "(", "0": ")", "-": "_", "=": "+", q: "Ÿé", w: "Ÿã", e: "Ÿè", r: "Ÿå", t: "Ÿê", y: "Ÿç", u: "Ÿë", i: "Ÿí", o: "ŸÄ", p: "√∑", "[": "√ó", "]": "ÿõ", "\\": "|", a: "!", s: "@", d: "#", f: "$", g: "%", h: "ÿ¢", j: "&", k: "*", l: "(", ";": ")", "'": "_", z: "{", x: "}", c: "[", v: "]", b: ":", n: '"', m: "'", ",": "<", ".": ">", "/": "ÿü", }; function createKeyElement(keyObj) {
  const key = document.createElement("div"); key.classList.add("key"); if (keyObj.wide) key.classList.add("wide"); if (keyObj.type === "space") key.classList.add("space"); if (keyObj.type === "tab") key.classList.add("tab"); if (keyObj.type === "capslock") key.classList.add("capslock"); if (keyObj.type === "enter") key.classList.add("enter"); if (keyObj.type === "shift") key.classList.add("shift"); if (keyObj.type === "ctrl") key.classList.add("ctrl"); if (keyObj.type === "alt") key.classList.add("alt"); if (keyObj.type === "arrow") key.classList.add("arrow"); if (keyObj.type && ["shift", "ctrl", "alt", "tab", "capslock", "enter", "backspace", "space", "arrow"].includes(keyObj.type)) { key.textContent = keyObj.normal } else { if (isShift) { key.textContent = keyObj.shift || keyObj.normal } else { key.textContent = keyObj.normal } }
  key.addEventListener("click", () => handleKeyClick(keyObj)); return key
}
function renderKeyboard() { keyboard.innerHTML = ""; rows.forEach((row) => { const rowDiv = document.createElement("div"); rowDiv.classList.add("keyboard-row"); row.forEach((keyObj) => { const keyElement = createKeyElement(keyObj); rowDiv.appendChild(keyElement) }); keyboard.appendChild(rowDiv) }); updateSpecialKeysUI() }
function updateSpecialKeysUI() { document.querySelectorAll(".key.shift").forEach((el) => { if (isShift) el.classList.add("active"); else el.classList.remove("active") }); document.querySelectorAll(".key.capslock").forEach((el) => { if (isCapsLock) el.classList.add("active"); else el.classList.remove("active") }) }
function handleKeyClick(keyObj) {
  output.focus(); switch (keyObj.type) {
    case "backspace": output.value = output.value.slice(0, -1); break; case "tab": output.value += "\t"; break; case "capslock": isCapsLock = !isCapsLock; updateSpecialKeysUI(); break; case "enter": output.value += "\n"; break; case "shift": isShift = !isShift; renderKeyboard(); break; case "space": output.value += " "; break; case "ctrl": case "alt": case "arrow": break; default: let char = isShift ? keyObj.shift || keyObj.normal : keyObj.normal; if (isCapsLock) { }
      output.value += char; if (isShift) { isShift = !1; renderKeyboard() }
  }
}
window.addEventListener("keydown", (e) => {
  if (e.ctrlKey) { const key = e.key.toLowerCase(); if (['a', 'c', 'x', 'v'].includes(key)) { return } }
  if (e.repeat) return; if (e.key === "Backspace") { e.preventDefault(); output.value = output.value.slice(0, -1); return }
  if (e.key === "Enter") { e.preventDefault(); output.value += "\n"; return }
  if (e.key === "Tab") { e.preventDefault(); output.value += "\t"; return }
  if (e.key === "Shift") { isShift = !0; renderKeyboard(); return }
  if (e.key === "CapsLock") { isCapsLock = !isCapsLock; updateSpecialKeysUI(); return }
  const key = e.key.toLowerCase(); if (physicalKeyMap[key] !== undefined) {
    e.preventDefault(); let char; if (isShift) { char = physicalKeyShiftMap[key] || physicalKeyMap[key] } else { char = physicalKeyMap[key] }
    output.value += char; if (isShift) { isShift = !1; renderKeyboard() }
  }
}); window.addEventListener("keyup", (e) => { if (e.key === "Shift") { isShift = !1; renderKeyboard() } }); copyBtn.addEventListener("click", () => { output.select(); document.execCommand("copy"); copyBtn.textContent = "⁄©Ÿæ€å ÿ¥ÿØ!"; setTimeout(() => (copyBtn.textContent = "üìã ⁄©Ÿæ€å"), 1500) }); window.addEventListener("DOMContentLoaded", () => {
  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches; let savedTheme = localStorage.getItem('theme'); if (!savedTheme) { localStorage.setItem('theme', prefersDark ? 'dark' : 'light'); savedTheme = prefersDark ? 'dark' : 'light' }
  if (savedTheme === "dark") { document.body.classList.add("dark"); themeToggle.checked = !0 } else { document.body.classList.remove("dark"); themeToggle.checked = !1 }
}); themeToggle.addEventListener("change", () => { if (themeToggle.checked) { document.body.classList.add("dark"); localStorage.setItem("theme", "dark") } else { document.body.classList.remove("dark"); localStorage.setItem("theme", "light") } }); renderKeyboard()